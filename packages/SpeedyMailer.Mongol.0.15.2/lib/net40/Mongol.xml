<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mongol</name>
    </assembly>
    <members>
        <member name="T:Mongol.Aggregation">
            <summary>
            Static convenience methods for generating Aggregation Framework pipeline commands and arguments
            </summary>
        </member>
        <member name="M:Mongol.Aggregation.Match(MongoDB.Driver.Builders.QueryComplete)">
            <summary>
            Generates a $match pipeline command based upon the given query
            </summary>
            <param name="query">The query used to filter the pipeline document</param>
        </member>
        <member name="M:Mongol.Aggregation.Project(MongoDB.Bson.BsonElement[])">
            <summary>
            Generates a $project pipeline command based upon the provided projection specifications
            </summary>
            <param name="projectionFields">A params array of projection specifications</param>
        </member>
        <member name="M:Mongol.Aggregation.Project(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Generates a $project pipeline command based upon the provided projection specifications
            </summary>
            <param name="projectionFields">An enumerable of projection specifications</param>
        </member>
        <member name="M:Mongol.Aggregation.Group(MongoDB.Bson.BsonElement,MongoDB.Bson.BsonElement[])">
            <summary>
            Generates a $group pipeline command based upon the specified group-by and grouping-aggregation specifications
            </summary>
            <param name="GroupBy">The group-by specification for grouping distinction</param>
            <param name="Aggregations">params array of grouping-aggregation expressions</param>
        </member>
        <member name="M:Mongol.Aggregation.Group(MongoDB.Bson.BsonElement,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Generates a $group pipeline command based upon the specified group-by and grouping-aggregation specifications
            </summary>
            <param name="GroupBy">The group-by specification for grouping distinction</param>
            <param name="Aggregations">An enumerable of grouping-aggregation expressions</param>
        </member>
        <member name="M:Mongol.Aggregation.Sort(MongoDB.Bson.BsonDocument)">
            <summary>
            Generates a $sort pipeline command based upon the specified sort expression
            </summary>
            <param name="Sort">The sort expression</param>
        </member>
        <member name="M:Mongol.Aggregation.Unwind(System.String)">
            <summary>
            Generates an $unwind pipeline command against the specified array field
            </summary>
            <param name="arrayFieldPath">The name of the array field to unwind</param>
        </member>
        <member name="T:Mongol.Aggregation.Projection">
            <summary>
            Static methods to generate projection specifications
            </summary>
        </member>
        <member name="M:Mongol.Aggregation.Projection.Include(System.String)">
            <summary>
            Creates an inclusion projection to add a field to the projected document
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Mongol.Aggregation.Projection.Exclude(System.String)">
            <summary>
            Creates an exclusion projection to specifically remove a field from the projected document
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Mongol.Aggregation.Projection.ProjectAs(System.String,System.String)">
            <summary>
            Creates a mapping projection to rename or create a field in the projected document based upon the given expression
            </summary>
            <param name="Expression"></param>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Mongol.Aggregation.Grouping">
            <summary>
            Static methods to generate group-by and grouping-aggregation specifications
            </summary>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.By(System.String)">
            <summary>
            Creates a group-by specification on a single field
            </summary>
            <param name="Field">The name of the field to group by</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.By(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a group-by specification on multiple fields.  The grouping _id becomes an object with each field as a property.
            </summary>
            <param name="Fields">An enumerable list of fields</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.By(System.String[])">
            <summary>
            Creates a group-by specification on multiple fields.  The grouping _id becomes an object with each field as a property.
            </summary>
            <param name="Fields">A params array of fields</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.Sum(System.String,System.String)">
            <summary>
            Creates a grouping-aggregation specification to $sum a field or expression
            </summary>
            <param name="FieldName">The field name for the grouping value in the output document</param>
            <param name="Expression">If specified, the expression to be summed.  Otherwise, the same field name from the input document will be used.</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.First(System.String,System.String)">
            <summary>
            Creates a grouping-aggregation specification to find the $first value of a field or expression
            </summary>
            <param name="FieldName">The field name for the grouping value in the output document</param>
            <param name="Expression">If specified, the expression to be examined.  Otherwise, the same field name from the input document will be used.</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.Max(System.String,System.String)">
            <summary>
            Creates a grouping-aggregation specification to find the $max value of a field or expression
            </summary>
            <param name="FieldName">The field name for the grouping value in the output document</param>
            <param name="Expression">If specified, the expression to be examined.  Otherwise, the same field name from the input document will be used.</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.AddToSet(System.String,System.String)">
            <summary>
            Creates a grouping-aggregation specification to add the value to an array if not already in the array.
            </summary>
            <param name="FieldName">The field name for the grouping value in the output document</param>
            <param name="Expression">If specified, the expression to be added to the set.  Otherwise, the same field name from the input document will be used.</param>
        </member>
        <member name="M:Mongol.Aggregation.Grouping.Count(System.String)">
            <summary>
            Creates a grouping-aggregation specification to count the number of items.
            </summary>
            <param name="FieldName">The field name for the grouping value in the output document</param>
            <returns></returns>
        </member>
        <member name="P:Mongol.Aggregation.Grouping.ByNothing">
            <summary>
            Creates a group-by nothing specification where all items are grouped into a single bucket
            </summary>
        </member>
        <member name="T:Mongol.Aggregation.Sorting">
            <summary>
            Static methods to generate aggregation sort expressions
            </summary>
        </member>
        <member name="M:Mongol.Aggregation.Sorting.By(System.String,System.Boolean)">
            <summary>
            Creates a sort expression by a single field
            </summary>
            <param name="field">The field or expression to sort by</param>
            <param name="ascending">True if ascending (default), false if descending</param>
        </member>
        <member name="M:Mongol.Aggregation.Sorting.By(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a sort expression by multiple fields
            </summary>
            <param name="fields">An enumerable list of fields or expressions to sort by</param>
            <param name="ascending">True if ascending (default), false if descending</param>
        </member>
        <member name="M:Mongol.Aggregation.Sorting.By(System.String[])">
            <summary>
            Creates a sort expression by multiple fields in ascending order
            </summary>
            <param name="fields">A params array of fields or expressions to sort by</param>
        </member>
        <member name="M:Mongol.Aggregation.Sorting.ByDescending(System.String[])">
            <summary>
            Creates a sort expression by multiple fields in ascending order
            </summary>
            <param name="fields">A params array of fields or expressions to sort by</param>
        </member>
        <member name="M:Mongol.Aggregation.Sorting.ById(System.Boolean)">
            <summary>
            Creates a sort expression to sort by ID
            </summary>
            <param name="ascending">True if ascending (default), false if descending</param>
        </member>
        <member name="T:Mongol.ITimeStampedRecord">
            <summary>
            By implementing this interface, Records saved with a RecordManager will have these dates automatically maintained.
            </summary>
        </member>
        <member name="P:Mongol.ITimeStampedRecord.CreatedDate">
            <summary>
            The time/date the document was originally created.
            </summary>
        </member>
        <member name="P:Mongol.ITimeStampedRecord.ModifiedDate">
            <summary>
            The time/date the document was most recently modified.
            </summary>
        </member>
        <member name="T:Mongol.CachingRecordManager`1">
            <summary>
            Works like a standard RecordManager, except that it keeps a cache of all retrieved records.  Well suited for lookups collections
            that have a relatively small number of objects that are frequently retrieved for read-only activity.  
            </summary>
            <remarks>Calling Save() will in addition to saving the object, also update the item in the cache. Calling Delete() will also remove the item from the cache.</remarks>
        </member>
        <member name="T:Mongol.RecordManager`1">
            <summary>
            Repository gateway to a single collection named after the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of object to be stored in the collection</typeparam>
        </member>
        <member name="T:Mongol.RecordManager">
            <summary>
            The untyped RecordManager manager class is used to collect any constants, or statics that may be useful without needing to have a particular typed instance.
            </summary>
        </member>
        <member name="F:Mongol.RecordManager.ID_FIELD">
            <summary>
            The field name MongoDB uses for the _id field.  Useful when specifying query or update operations against the ID field to avoid duplicating "magic string" constants.
            </summary>
        </member>
        <member name="T:Mongol.IRecordManager`1">
            <summary>
            Interface implemented by RecordManager instances containing the basic publicly exposed CRUD operations for the repository.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Mongol.IRecordManager">
            <summary>
            Marker interface to identify instances of RecordManager as a polymorphic base handle.
            </summary>
        </member>
        <member name="M:Mongol.IRecordManager`1.DeleteById(System.Object)">
            <summary>
            Deletes a single record from the collection by id.
            </summary>
        </member>
        <member name="M:Mongol.IRecordManager`1.GetById(System.Object)">
            <summary>
            Retrieves a single record from the collection by Id
            </summary>
        </member>
        <member name="M:Mongol.IRecordManager`1.GetManyByIds(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Retrieves matching records by the ids.
            </summary>
            <remarks>Useful to solve 1-N problems on psuedo-joins. The list of ids should not contain an unreasonable number of items (Mongo has a limit of 4MB per query document).</remarks>
            <param name="ids">The list of Id's for which to find records.</param>
        </member>
        <member name="M:Mongol.IRecordManager`1.Save(`0)">
            <summary>
            Saves a record to the collection (either as an insert or update).  Replaces the entire record if updated.
            </summary>
            <returns>true if the record was inserted, false if it was overwritten or if the connection is not using SafeMode.</returns>
        </member>
        <member name="M:Mongol.IRecordManager`1.BatchInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts many items into the collection in a single batch.
            </summary>
            <remarks>The number of items cannot be too large because there is a size-limit on messages, but it's pretty reasonable.</remarks>
            <returns>The number of items that were Inserted.</returns>
        </member>
        <member name="P:Mongol.IRecordManager`1.AsQueryable">
            <summary>
            The Linq Queryable for the collection
            </summary>
        </member>
        <member name="F:Mongol.RecordManager`1.Initialized">
            <summary>
            Used to track when Initialize needs to be run (once per application run)
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new RecordManager
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.DeleteById(System.Object)">
            <summary>
            Deletes a single record from the collection by id.
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.GetById(System.Object)">
            <summary>
            Retrieves a single record from the collection by Id
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.GetManyByIds(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Retrieves matching records by the ids.
            </summary>
            <remarks>Useful to solve 1-N problems on psuedo-joins. The list of ids should not contain an unreasonable number of items (Mongo has a limit of 4MB per query document).</remarks>
            <param name="ids">The list of Id's for which to find records.</param>
        </member>
        <member name="M:Mongol.RecordManager`1.BatchInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts many items into the collection in a single batch.
            </summary>
            <remarks>The number of items cannot be too large because there is a size-limit on messages, but it's pretty reasonable.</remarks>
            <returns>The number of items that were Inserted.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Save(`0)">
            <summary>
            Saves a record to the collection (either as an insert or update).  Replaces the entire record if updated.
            </summary>
            <returns>true if the record was inserted, false if it was overwritten or if the connection is not using SafeMode.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Initialize">
            <summary>
            Override this method to do any once-per application run initialization (such as ensuring indexes), setting special ClassMap conventions, collection cleanup, etc.
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.GetRecordId(`0)">
            <summary>
            Retrieves the Id of a Record
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.Count(MongoDB.Driver.IMongoQuery)">
            <summary>
            Gets the number of items in the collection that match the optional query criteria (or all items if no query specified).
            </summary>
            <param name="criteria">An optional query to filter the counted items.</param>
            <returns>The number of items in the collection matching the filter.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Find(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Executes a search query against the collection, optionally applying a sort, skip, and limit.
            </summary>
            <remarks>
            Use common sense about indexing common queries, especially for sizeable collections. 
            It is simpler to set the basic cursor options via parameters than multiple lines to set options using the standard driver.
            </remarks>
        </member>
        <member name="M:Mongol.RecordManager`1.FindSingle(MongoDB.Driver.IMongoQuery)">
            <summary>
            Finds the one and only item in the collection matching the criteria.  Throws an exception if multiple items were matched.
            </summary>
            <returns>The item or null if no matches are found.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.OnBeforeSave(`0)">
            <summary>
            Event hook called becore a record is saved (either single or in batch).
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.OnAfterSave(`0)">
            <summary>
            Event hook called after a record is saved.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Mongol.RecordManager`1.DropCollection">
            <summary>
            Removes the entire collection from the database (dropping indexes too).
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.FindOneAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.IMongoSortBy,System.Boolean)">
            <summary>
            Atomically finds and modifies at most one item in the collection, returning the item.
            </summary>
            <param name="update">The update command to modify the item.  The update operation should usually cause the item to no longer match the query criteria.</param>
            <param name="sortBy">The sort order to use (the first matching item is used)</param>
            <param name="returnModifiedVersion">If true, returns the post-modification version of the item, otherwise the item as it was before modification.  Default=true</param>
            <remarks>Useful for managing concurrency across multiple processes such as a Queue.  Can also be used to setup items that go through a workflow.</remarks>
        </member>
        <member name="M:Mongol.RecordManager`1.FindOneAndRemove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy)">
            <summary>
            Automically finds and removes at most one item from the collection, returning the item.
            </summary>
            <param name="sortBy">The sort order to use (the first matching item is used)</param>
        </member>
        <member name="M:Mongol.RecordManager`1.EnumerateAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.IMongoSortBy,System.Boolean)">
            <summary>
            Enumerates FindAndModify, be certain that your update causes documents to no longer match the query, or you will end up with an infinite loop.  
            This is thread-safe to work across multiple callers (and processes) since it uses Mongo to atomically find and modify.
            </summary>
            <param name="criteria">The criteria for which to find items</param>
            <param name="update">The update command to modify the items.</param>
            <param name="returnModifiedVersion">If true, returns the post-modification version of the item, otherwise the item as it was before modification. Default=true</param>
        </member>
        <member name="M:Mongol.RecordManager`1.EnumerateAndRemove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy)">
            <summary>
            Enumerates FindAndRemove, removing each one from the database as it is returned. 
            This is thread-safe to work across multiple callers (and processes) since it uses Mongo to atomically find and remove.
            </summary>
            <param name="criteria">The criteria for which to find items</param>
        </member>
        <member name="M:Mongol.RecordManager`1.UpdateMany(MongoDB.Driver.IMongoQuery,MongoDB.Driver.Builders.UpdateBuilder,System.Boolean)">
            <summary>
            Updates many documents at once.
            </summary>
            <param name="update">The update operation to apply to the matched items.</param>
            <param name="asUpsert">If true, MongoDB will attempt to create new items based upon the query values passed in.</param>
            <returns>The number of items updated (Always 0 if the connection is not using SafeMode).</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.DeleteMany(MongoDB.Driver.IMongoQuery)">
            <summary>
            Deletes multiple items in the colleciton by query criteria.
            </summary>
            <returns>The number of documents deleted.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.PropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns a string representation of the specified expression.  This allows you to strongly type your query criteria, so they can be passed back to Mongo as strings.
            </summary>
            <param name="expression">A member expression on the record type.</param>
            <returns>A string representing the member expression</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.EnsureIndex(MongoDB.Driver.IMongoIndexKeys,MongoDB.Driver.IMongoIndexOptions)">
            <summary>
            Ensures that the specified index is created on the collection.
            </summary>
            <remarks>Can be called multiple times in-expensively.</remarks>
        </member>
        <member name="M:Mongol.RecordManager`1.QueryCriteria_ById(System.Object)">
            <summary>
            Convenience method to create a Query criteria based upon the ID field.
            </summary>
            <param name="Id">The value of the Id for which to query</param>
            <returns>A MongoQuery criteria for the equality of the specified Id.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.QueryCriteria_ById(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convenience method to create a Query criteria based upon the ID field.
            </summary>
            <param name="Id">A list of values for Ids for which to query</param>
            <returns>A MongoQuery criteria for the equality of the specified Id.</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.find(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Internal implementation Called by other functions to avoid duplicate logging.
            </summary>
        </member>
        <member name="M:Mongol.RecordManager`1.Aggregate(MongoDB.Bson.BsonDocument[])">
            <summary>
            Executes an aggregation command using the specified pipeline
            </summary>
            <param name="pipeline">A params array of BsonDocuments representing aggregation commands</param>
            <remarks>Use the Mongol.Aggregation class convenience methods to generate pipeline commands</remarks>
            <returns>An enumerable list of the aggregation results</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Aggregate(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonDocument})">
            <summary>
            Executes an aggregation command using the specified pipeline
            </summary>
            <param name="pipeline">An array of BsonDocuments representing aggregation commands</param>
            <remarks>Use the Mongol.Aggregation class convenience methods to generate pipeline commands</remarks>
            <returns>An enumerable list of the aggregation results</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Aggregate``1(MongoDB.Bson.BsonDocument[])">
            <summary>
            Executes an aggregation command using the specified pipeline
            </summary>
            <param name="pipeline">A params array of BsonDocuments representing aggregation commands</param>
            <remarks>Use the Mongol.Aggregation class convenience methods to generate pipeline commands</remarks>
            <returns>An strongly typed enumerable of the aggregation results</returns>
        </member>
        <member name="M:Mongol.RecordManager`1.Aggregate``1(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonDocument})">
            <summary>
            Executes an aggregation command using the specified pipeline
            </summary>
            <param name="pipeline">A params array of BsonDocuments representing aggregation commands</param>
            <remarks>Use the Mongol.Aggregation class convenience methods to generate pipeline commands</remarks>
            <returns>A strongly typed enumerable of the aggregation results</returns>
        </member>
        <member name="P:Mongol.RecordManager`1.ConnectionName">
            <summary>
            The name of the Mongol connection to use. 
            </summary>
        </member>
        <member name="P:Mongol.RecordManager`1.collection">
            <summary>
            The underlying MongoDB collection that the RecordManager encapsulates
            </summary>
        </member>
        <member name="P:Mongol.RecordManager`1.AsQueryable">
            <summary>
            The Linq Queryable for the collection
            </summary>
        </member>
        <member name="M:Mongol.CachingRecordManager`1.GetById(System.Object)">
            <summary>
            Retrieves an object by Id and caches the retrieval by Id for future lookup.
            </summary>
        </member>
        <member name="M:Mongol.CachingRecordManager`1.ClearCache">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Mongol.CachingRecordManager`1.ClearItem(System.Object)">
            <summary>
            Removes a single item from the cache.
            </summary>
        </member>
        <member name="M:Mongol.CachingRecordManager`1.DeleteById(System.Object)">
            <summary>
            Deletes the item in the data store and also removes the item from the cache.
            </summary>
        </member>
        <member name="M:Mongol.CachingRecordManager`1.Save(`0)">
            <summary>
            Updates the item in the data store and also updates the item in the cache.
            </summary>
        </member>
        <member name="T:Mongol.IMongoQueryExtensions">
            <summary>
            These are convenience extension methods for chaining together multiple Mongo Query Criteria with a fluent syntax.
            </summary>
        </member>
        <member name="M:Mongol.IMongoQueryExtensions.And(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoQuery)">
            <summary>
            Joins the two queries with a $and operator
            </summary>
        </member>
        <member name="M:Mongol.IMongoQueryExtensions.Or(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoQuery)">
            <summary>
            Joins the two queries with an $or operator
            </summary>
        </member>
        <member name="T:Mongol.ListExtensions">
            <summary>
            List extensions for Mongol
            </summary>
        </member>
        <member name="M:Mongol.ListExtensions.Relative``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides a mechanism to dereference child elements of a collection, removing the prefix of the parent.  Used for Lambda expressions that need to access properties of child elements.
            </summary>
        </member>
        <member name="M:Mongol.ListExtensions.Member``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides a mechanism to dereference child elements of a collection.  Used for Lambda expressions that need to access properties of child elements.
            </summary>
        </member>
        <member name="T:Mongol.ManagerFactory">
            <summary>
            Simple instance cache for RecordManagers.
            </summary>
        </member>
        <member name="M:Mongol.ManagerFactory.GetManager``1">
            <summary>
            Retrieves an instance of the specified RecordManager from an internal cache.  Creates a new instance using the default constructor if one doesn't already exist.
            </summary>
            <typeparam name="TManager"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mongol.ManagerFactory.SetManager``1(Mongol.IRecordManager)">
            <summary>
            Allows population of a specific RecordManager instance into the cache.
            </summary>
            <typeparam name="TManager"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="T:Mongol.Connection">
            <summary>
            This class coordinates the connection strings for Mongol.  By default it will read connection strings from the appSettings elements.  &quot;Mongol.Url&quot; is the key for the default connection.
            Specific named connections can be specified in appSettings as &quot;Mongol.Url.CONNECTIONNAME&quot;.  Alternatively, connections can be explicitly configured by the application by calling AddConnection.
            </summary>
        </member>
        <member name="M:Mongol.Connection.GetInstance(System.String)">
            <summary>
            Retrieves a MongoDatabase instance based upon the named connection.
            </summary>
            <param name="Name">The name of the connection (null if default connection)</param>
        </member>
        <member name="M:Mongol.Connection.SetConnection(System.String,System.String)">
            <summary>
            Sets the value for a named connection.
            </summary>
            <param name="Name">The name of the new connection.</param>
            <param name="url">The MongoDB url for the connection.  Pass a value of null to remove the connection from the list.</param>
        </member>
        <member name="T:Mongol.CollectionNameAttribute">
            <summary>
            Used to override the name of the collection managed by the RecordManager.
            </summary>
        </member>
        <member name="M:Mongol.CollectionNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the attribute, specifying the collection name.
            </summary>
            <param name="CollectionName"></param>
        </member>
        <member name="P:Mongol.CollectionNameAttribute.CollectionName">
            <summary>
            The name of the collection to be used.
            </summary>
        </member>
        <member name="M:Mongol.MongoDatabaseExtensions.GetCollection``1(MongoDB.Driver.MongoDatabase)">
            <summary>
            Returns the collection for the specified Document Type.  Uses the class name, or the value in a MongoCollectionNameAttribute applied to the type.
            </summary>
            <typeparam name="TDocument"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="T:Mongol.ConnectionNameAttribute">
            <summary>
            Used to override the name of the Mongol Connection used by the RecordManager.
            </summary>
        </member>
        <member name="M:Mongol.ConnectionNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the attribute, specifying the connection name.
            </summary>
            <param name="ConnectionName"></param>
        </member>
        <member name="P:Mongol.ConnectionNameAttribute.ConnectionName">
            <summary>
            The name of the Mongol Connection to be used.
            </summary>
        </member>
        <member name="T:Mongol.Record">
            <summary>
            Suitable class from which sub-classes can inherit to represent a business entity (a single document in a MongoDB collection).  Provides automatic string-based Id's with associated ObjectId generator, 
            equality comparison based upon Id matching, and GetHashCode() implementation.
            </summary>
        </member>
        <member name="M:Mongol.Record.Equals(System.Object)">
            <summary>
            Considers two records are equal if and only if they have equal, non-null id's.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mongol.Record.GetHashCode">
            <summary>
            Uses the Hashcode of the Id if it's present, otherwise calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mongol.Record.ToString">
            <summary>
            Combines the ClassName and Id of the Record
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mongol.Record.Id">
            <summary>
            The Id of the record.  Should uniquely identify the record within a collection.  If unset, will be autogenerated on save.
            </summary>
        </member>
        <member name="T:Mongol.PropertyNameResolver`1">
            <summary>
            The PropertyNameResolver static class provides utility methods to generate strings representing field-member access for use in MongoDB query and update operations.
            This allows you to use lambda expressions to represent the properties you wish to use for query or update instead of coding literal string values to represent those members.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mongol.PropertyNameResolver`1.Resolve``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Resolves a member-access expression into a dotted-string suitable for using in a MongoDB query or update statement.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Mongol.TimeStampedRecord">
            <summary>
            Suitable class from which sub-classes can inherit to represent a business entity (a single document in a MongoDB collection) that has automatic Created/Modified Date maintenance applied.
            </summary>
        </member>
        <member name="P:Mongol.TimeStampedRecord.CreatedDate">
            <summary>
            The time/date the document was originally created.
            </summary>
        </member>
        <member name="P:Mongol.TimeStampedRecord.ModifiedDate">
            <summary>
            The time/date the document was most recently modified.
            </summary>
        </member>
    </members>
</doc>
